<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Universidad Nacional de Colombia POO hub – Basic Concepts</title>
    <link>http://localhost:1313/docs/basic-concepts/</link>
    <description>Recent content in Basic Concepts on Universidad Nacional de Colombia POO hub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="http://localhost:1313/docs/basic-concepts/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Class concept</title>
      <link>http://localhost:1313/docs/basic-concepts/class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/basic-concepts/class/</guid>
      <description>
        
        
        




  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      A class is a user-defined data type. A class is a blueprint for creating objects that share common properties and behaviors.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;font color=&#34;#007bff&#34;&gt;class&lt;/font&gt; can be thought of as a blueprint that defines the structure of objects in a program. It&amp;rsquo;s like a mold from which individual objects are created, each with its own attributes and behaviors.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider the concept of a class using the example of a &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;font color=&#34;#007bff&#34;&gt;class&lt;/font&gt; is like a blueprint or template for creating objects. In our example, the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class represents the blueprint for creating individual bank account objects.&lt;/p&gt;
&lt;pre class=&#34;mermaid hx-mt-6&#34;&gt;classDiagram
    class BankAccount {
    Int    accountNumber
    Int    Balance 
    String accountHolder
    deposit(amount)
    withdraw(amount)
    } &lt;/pre&gt;&lt;div style=&#34;display: flex; justify-content: center;&#34;&gt;
    &lt;div class=&#34;mermaid&#34;&gt;
    classDiagram
    class BankAccount {
    Int    accountNumber
    Int    Balance 
    String accountHolder
    deposit(amount)
    withdraw(amount)
    } 
    &lt;/div&gt;
&lt;/div&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;BankAccount&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber &lt;/font&gt;: Int &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance &lt;/font&gt;: Int&lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder &lt;/font&gt; : String&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Attributes:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;attributes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#attributes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#FFA600&#34;&gt;Attributes&lt;/font&gt; are characteristics or properties that describe the objects created from the class. For instance, in the case of a &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt;, attributes could include &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountNumber&lt;/code&gt;&lt;/font&gt;, &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;balance&lt;/code&gt;&lt;/font&gt;, and &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountHolder&lt;/code&gt;&lt;/font&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Methods:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;methods&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#methods&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#F2613F&#34;&gt;Methods&lt;/font&gt; are functions that define the behavior of the objects created from the class. In the context of a &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt;, methods could include operations like &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw&lt;/code&gt;&lt;/font&gt;, which specify how money can be added to or withdrawn from an account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This class blueprint defines the structure for creating &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; objects. Each object instantiated from this class inherits &lt;font color=&#34;#FFA600&#34;&gt;attributes&lt;/font&gt; such as &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountNumber&lt;/code&gt;&lt;/font&gt;, &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;balance&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountHolder&lt;/code&gt;&lt;/font&gt;. Additionally, the &lt;font color=&#34;#F2613F&#34;&gt;methods&lt;/font&gt; such as &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit()&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw()&lt;/code&gt;&lt;/font&gt;, enable the objects to perform operations like adding or withdrawing money.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Object concept</title>
      <link>http://localhost:1313/docs/basic-concepts/object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/basic-concepts/object/</guid>
      <description>
        
        
        




  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      In object-oriented programming (OOP), an &lt;font color=&#34;#0047ab&#34;&gt;object&lt;/font&gt; is an instance of a &lt;font color=&#34;#007bff&#34;&gt;class&lt;/font&gt;, encapsulating attributes and behaviors to model real-world entities.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Remember that we have a class called &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt;. This class represents a bank account, and it has &lt;font color=&#34;#F2613F&#34;&gt;methods&lt;/font&gt; to perform banking operations like depositing money and withdrawing money.&lt;/p&gt;
&lt;p&gt;In our example, an object is an instance of the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class. Each individual bank account created from the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class is an object.&lt;/p&gt;
&lt;p&gt;These objects, such as &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account 1&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account 2&lt;/code&gt;&lt;/font&gt;, inherit &lt;font color=&#34;#FFA600&#34;&gt;attributes&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;methods&lt;/font&gt; from the class, but hold their own unique data.&lt;/p&gt;
&lt;h4&gt;Attributes:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;attributes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#attributes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Each bank account object has its own set of attributes that describe its specific state. For instance, each bank account object might have attributes like &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountNumber&lt;/code&gt;&lt;/font&gt;, &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;balance&lt;/code&gt;&lt;/font&gt;, and &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountHolder&lt;/code&gt;&lt;/font&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Methods:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;methods&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#methods&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Objects have access to the methods defined by their class. These methods define the behavior or actions that objects can perform. For example, each bank account object can use methods like &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw&lt;/code&gt;&lt;/font&gt; to manage its funds.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Bank Account Example:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;bank-account-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bank-account-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Suppose we create two bank account objects from the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;Account 1&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;Account 2&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 123456 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 500 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: John Doe&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 789012 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 1000 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: Jane Smith&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each bank account object represents a distinct bank account with its own unique attributes and behaviors. For example, &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account 1&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account 2&lt;/code&gt;&lt;/font&gt; have different &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountNumbers&lt;/code&gt;&lt;/font&gt;, &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;balances&lt;/code&gt;&lt;/font&gt;, and &lt;font color=&#34;#FFA600&#34;&gt;&lt;code&gt;accountHolders&lt;/code&gt;&lt;/font&gt;. They can each independently use the &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw&lt;/code&gt;&lt;/font&gt; methods to manage their funds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Attributes concept</title>
      <link>http://localhost:1313/docs/basic-concepts/attributes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/basic-concepts/attributes/</guid>
      <description>
        
        
        




  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      In object-oriented programming (OOP), an &lt;font color=&#34;#FFA600&#34;&gt;attribute&lt;/font&gt; (also known as a property or field) is a characteristic or property of an object. It represents the data that an object holds and defines its state.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;font color=&#34;#FFA600&#34;&gt;Attributes&lt;/font&gt; are defined within a &lt;font color=&#34;#007bff&#34;&gt;class&lt;/font&gt;, and each object created from that class has its own unique values for those attributes. For example, in a &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class, attributes might include the &lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;, &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;, and &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s delve into the concept of attributes considering the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class. Each bank account object created from this class will have its own set of attributes:&lt;/p&gt;
&lt;h4&gt;Bank Account Example:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;bank-account-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bank-account-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Consider the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class. Each bank account object created from this class will have its own set of attributes:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;BankAccount&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: Int &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: Int &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: String&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Suppose we create two &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; objects:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;account1&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;account2&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 123456 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 500 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: John Doe&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 789012 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 1000 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: Jane Smith&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In this example, we see that although both &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account1&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account2&lt;/code&gt;&lt;/font&gt; are instances of the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class, each object has its own unique attribute values.&lt;/p&gt;
&lt;p&gt;Each object of the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class shares the same &lt;font color=&#34;#FFA600&#34;&gt;attributes&lt;/font&gt;, but the values of these attributes differ from one object to another.
This distinction between objects is a fundamental concept in object-oriented programming, where each object carries its own specific data while sharing the same structure and behavior as defined by the class. Understanding how &lt;font color=&#34;#FFA600&#34;&gt;attributes&lt;/font&gt; work helps in managing and manipulating objects effectively within a program.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Methods Concept</title>
      <link>http://localhost:1313/docs/basic-concepts/methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/docs/basic-concepts/methods/</guid>
      <description>
        
        
        




  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-blue-200 hx-bg-blue-100 hx-text-blue-900 dark:hx-border-blue-200/30 dark:hx-bg-blue-900/30 dark:hx-text-blue-200&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;div class=&#34;hx-select-none hx-text-xl&#34; style=&#34;font-family: &#39;Apple Color Emoji&#39;, &#39;Segoe UI Emoji&#39;, &#39;Segoe UI Symbol&#39;;&#34;&gt;
        ℹ️
      &lt;/div&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      In object-oriented programming, &lt;font color=&#34;#F2613F&#34;&gt;methods&lt;/font&gt; define the actions that an object can perform. They are functions within a class that describe the behaviors or operations of the objects created from the class.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Methods are integral to how objects interact with each other and perform tasks. Let’s explore this concept using the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class example:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;BankAccount&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Bank Account Example:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;bank-account-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bank-account-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For instance, let&amp;rsquo;s use the &lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;BankAccount&lt;/code&gt;&lt;/font&gt; class to create two bank account objects:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;account1&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;ㅤㅤㅤㅤㅤ&lt;font color=&#34;#007bff&#34;&gt;account2&lt;/font&gt;ㅤㅤㅤㅤㅤ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 123456 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 500 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: John Doe&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#FFA600&#34;&gt;accountNumber&lt;/font&gt;: 789012 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;balance&lt;/font&gt;: 1000 &lt;br/&gt; &lt;font color=&#34;#FFA600&#34;&gt;accountHolder&lt;/font&gt;: Jane Smith&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&lt;font color=&#34;#F2613F&#34;&gt;deposit&lt;/font&gt;(amount) &lt;br/&gt; &lt;font color=&#34;#F2613F&#34;&gt;withdraw&lt;/font&gt;(amount)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Method Usage:&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;method-usage&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#method-usage&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account1&lt;/code&gt;&lt;/font&gt; can use the &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit&lt;/code&gt;&lt;/font&gt; method to add funds and the &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw&lt;/code&gt;&lt;/font&gt; method to withdraw funds.&lt;/li&gt;
&lt;li&gt;&lt;font color=&#34;#007bff&#34;&gt;&lt;code&gt;account2&lt;/code&gt;&lt;/font&gt; has the same methods but can perform &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;deposit&lt;/code&gt;&lt;/font&gt; and &lt;font color=&#34;#F2613F&#34;&gt;&lt;code&gt;withdraw&lt;/code&gt;&lt;/font&gt; operations based on its own balance and account details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each object has access to the same &lt;font color=&#34;#F2613F&#34;&gt;methods&lt;/font&gt; defined in the class, which enables them to perform similar actions, but the outcomes of these methods depend on the object&amp;rsquo;s specific attributes and current state.&lt;/p&gt;





  












&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-rounded-lg hx-border hx-py-2 ltr:hx-pr-4 rtl:hx-pl-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-orange-100 hx-bg-orange-50 hx-text-orange-800 dark:hx-border-orange-400/30 dark:hx-bg-orange-400/20 dark:hx-text-orange-300&#34;&gt;
  &lt;div class=&#34;ltr:hx-pl-3 ltr:hx-pr-2 rtl:hx-pr-3 rtl:hx-pl-2&#34;&gt;&lt;/div&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;
      Explore the &lt;strong&gt;Core Principles&lt;/strong&gt; chapter to learn more about how methods integrate with the core principles of OOP, including inheritance, polymorphism, abstraction, and encapsulation.
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


      </description>
    </item>
    
  </channel>
</rss>
